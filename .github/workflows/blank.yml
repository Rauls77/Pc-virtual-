name: Windows Cloud PC - Gaming Optimization

on:
  workflow_dispatch:

jobs:
  build:
    name: Start Building...
    runs-on: windows-latest
    timeout-minutes: 10080  # Máximo de 7 dias de execução

    steps:
      - name: Install Parsec
        run: |
          # Caminho para o instalador do Parsec
          $parsecInstaller = "ParsecSetup.exe"
          
          # Baixa o instalador do Parsec
          Invoke-WebRequest -Uri "https://builds.parsec.app/package/parsec-windows.exe" -OutFile $parsecInstaller
          
          # Executa o instalador de forma silenciosa
          Start-Process -FilePath $parsecInstaller -ArgumentList "/S" -Wait
          Write-Host "Parsec instalado com sucesso."

      - name: Optimize AnyDesk for Gaming
        run: |
          # Configura AnyDesk para priorizar baixa latência
          $anydeskConfig = "C:\Program Files (x86)\AnyDesk\AnyDesk.exe"
          if (Test-Path $anydeskConfig) {
            Write-Host "Otimizando AnyDesk para baixa latência..."
            Start-Process -FilePath $anydeskConfig -ArgumentList "--set-priority-performance" -Wait
          } else {
            Write-Host "AnyDesk não encontrado para otimização."
          }

      - name: Optimize Parsec for Gaming
        run: |
          # Caminho do arquivo de configuração do Parsec
          $configPath = "$env:APPDATA\Parsec\config.txt"
          
          # Verifica e cria o diretório se não existir
          $configDir = [System.IO.Path]::GetDirectoryName($configPath)
          if (-not (Test-Path -Path $configDir)) {
            New-Item -ItemType Directory -Path $configDir -Force
            Write-Host "Diretório criado: $configDir"
          }

          # Grava as configurações no arquivo
          Set-Content -Path $configPath -Value @"
          encoder_bitrate=50
          network_latency=low
          decoder_threads=auto
          vsync=false
          quality=high
          "@
          Write-Host "Configurações do Parsec otimizadas."

      - name: Enable Gaming Mode & Optimize Windows
        run: |
          # Ativa o modo de jogo
          reg add "HKEY_CURRENT_USER\Software\Microsoft\GameBar" /v AllowAutoGameMode /t REG_DWORD /d 1 /f
          Write-Host "Modo de Jogo ativado."

          # Desativa efeitos visuais para melhor desempenho
          reg add "HKEY_CURRENT_USER\Control Panel\Desktop" /v UserPreferencesMask /t REG_BINARY /d 9012038010101000 /f
          Write-Host "Efeitos visuais desativados."

          # Define o plano de energia para alto desempenho
          powercfg -setactive SCHEME_MIN
          Write-Host "Plano de energia configurado para Alto Desempenho."

      - name: Install MSI Afterburner
        run: |
          # Instala ferramenta para monitoramento de desempenho
          Invoke-WebRequest -Uri "https://download.msi.com/utility/mb/afterburner/MSIAfterburnerSetup.zip" -OutFile "Afterburner.zip"
          Expand-Archive -Path "Afterburner.zip" -DestinationPath "Afterburner" -Force
          Start-Process -FilePath "Afterburner\Setup.exe" -ArgumentList "/S" -Wait
          Write-Host "MSI Afterburner instalado com sucesso."

      - name: Monitor and Restart AnyDesk
        run: |
          $startTime = Get-Date
          $timeLimit = [TimeSpan]::FromDays(7)  # Limite de 7 dias
          $checkInterval = 300  # Intervalo de 5 minutos entre verificações
          $logFile = "monitoring_log.txt"

          Write-Host "Monitoramento iniciado em: $startTime"
          Out-File -FilePath $logFile -InputObject "=== AnyDesk Monitoramento Iniciado ===`nData/Hora de início: $startTime`n" -Append

          while ((Get-Date) - $startTime -lt $timeLimit) {
            try {
              # Verifica se o processo AnyDesk está ativo
              $process = Get-Process -Name "AnyDesk" -ErrorAction SilentlyContinue
              
              if (-not $process) {
                Write-Host "$(Get-Date) - AnyDesk não está rodando. Tentando reiniciar..."
                Out-File -FilePath $logFile -InputObject "$(Get-Date) - AnyDesk não está rodando. Reiniciando..." -Append
                cmd /c start.bat
              } else {
                Write-Host "$(Get-Date) - AnyDesk está funcionando normalmente."
                Out-File -FilePath $logFile -InputObject "$(Get-Date) - AnyDesk está ativo." -Append
              }
            } catch {
              Write-Host "$(Get-Date) - Erro detectado durante a verificação: $_"
              Out-File -FilePath $logFile -InputObject "$(Get-Date) - Erro detectado: $_" -Append
            }

            # Pausa entre verificações
            Start-Sleep -Seconds $checkInterval
          }

          # Registro do fim do monitoramento
          $endTime = Get-Date
          Write-Host "Monitoramento finalizado em: $endTime"
          Out-File -FilePath $logFile -InputObject "`n=== Monitoramento Concluído ===`nData/Hora de término: $endTime`n" -Append

      - name: Clean Up Temporary Files
        run: |
          Remove-Item Afterburner.zip -Force
          Write-Host "Arquivos temporários removidos."
