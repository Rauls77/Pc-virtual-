name: Windows Cloud PC - Anydesk (With Save)

on:
  workflow_dispatch:

jobs:
  build:
    name: Infinite Execution with Save
    runs-on: windows-latest
    timeout-minutes: 10080  # 7 dias

    steps:
      # Configurar o repositório
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Baixar e instalar componentes essenciais com verificação de integridade
      - name: Downloading & Installing Essentials
        run: |
          $url = "https://www.dropbox.com/scl/fi/7eiczvgil84czu55dxep3/Downloads.bat?rlkey=wzdc1wxjsph2b7r0atplmdz3p&dl=1"
          $downloadedFile = "Downloads.bat"
          Invoke-WebRequest -Uri $url -OutFile $downloadedFile
          
          # Verificar integridade (exemplo: verificação de hash)
          $expectedHash = "ABC123..."  # Substitua pelo hash real esperado do arquivo
          $fileHash = Get-FileHash -Path $downloadedFile -Algorithm SHA256
          if ($fileHash.Hash -ne $expectedHash) {
              Write-Host "O arquivo está corrompido ou foi alterado. Abortando o processo."
              exit 1
          }

          cmd /c $downloadedFile

      # Salvar estado do sistema ou arquivos
      - name: Save Files or Configurations
        run: |
          $logContent = "Última execução: $(Get-Date)"
          $logFile = "log.txt"
          Set-Content -Path $logFile -Value $logContent

      # Commit automático das alterações, só se houver mudanças
      - name: Commit and Push Changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git diff --quiet || (git add . && git commit -m "Salvando alterações automáticas - $(Get-Date)" && git push)

      # Simulação de execução com limite de tempo (24 horas) em vez de loop infinito
      - name: Simulate Timed Execution
        run: |
          $maxRunTime = 86400  # 24 horas em segundos
          $startTime = Get-Date
          while ((Get-Date) - $startTime).TotalSeconds -lt $maxRunTime) {
              Write-Host "Job ainda está ativo às $(Get-Date)"
              Start-Sleep -Seconds 3600  # Espera de 1 hora
          }

      # Limpeza de arquivos temporários
      - name: Clean Up Temporary Files
        run: |
          Remove-Item -Path "Downloads.bat" -Force
          Remove-Item -Path "log.txt" -Force

      # Enviar notificação de status para o Slack (exemplo)
      - name: Send Slack Notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
