name: Criar PC Virtual com Máximos Recursos

on:
  workflow_dispatch:

jobs:
  create_vm:
    runs-on: ubuntu-latest

    steps:
      # Etapa 1: Instalar AWS CLI
      - name: Instalar AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install awscli -y
          aws --version

      # Etapa 2: Configurar AWS CLI com Credenciais (Secrets)
      - name: Configurar AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region us-east-1  # Substitua pela sua região da AWS

      # Etapa 3: Criar Instância EC2 com GPU A100 para Máximo Desempenho
      - name: Criar Instância EC2 com GPU A100
        run: |
          aws ec2 run-instances \
            --image-id ami-0abcdef1234567890 \  # Substitua com a AMI correta (ex: Ubuntu 20.04)
            --count 1 \
            --instance-type p4d.24xlarge \  # Instância com 8 GPUs NVIDIA A100 e 96 GB de RAM
            --key-name minha-chave-pair \  # Substitua pela sua chave privada
            --security-group-ids sg-0123456789abcdef0 \  # Substitua pelo ID do seu Security Group
            --subnet-id subnet-12345678 \  # Substitua pelo ID da sua Subnet
            --block-device-mappings \
              '[{"DeviceName":"/dev/sda1","Ebs":{"VolumeSize":1000,"VolumeType":"gp3"}}]' \  # Volume EBS de 1TB com SSD de alta performance
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=GitHub-VM}]'

      # Etapa 4: Obter IP Público da Instância EC2
      - name: Obter IP Público da Instância EC2
        id: ec2_ip
        run: |
          IP=$(aws ec2 describe-instances --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
          echo "IP público da instância EC2: $IP"
          echo "ip=$IP" >> $GITHUB_ENV  # Corrigido para salvar a variável de saída corretamente

      # Etapa 5: Instalar Parsec para Acesso Remoto
      - name: Instalar Parsec para Acesso Remoto
        run: |
          sudo apt-get update
          sudo apt-get install wine -y  # Instalando o wine
          wget https://builds.parsec.app/package/parsec-windows-latest.exe -O parsec-installer.exe
          wine parsec-installer.exe /S  # Instalar Parsec com Wine

      # Etapa 6: Configuração do Grupo de Segurança para Acesso Seguro
      - name: Configurar Grupo de Segurança
        run: |
          aws ec2 create-security-group \
            --group-name "GitHub-SG" \
            --description "Security Group para GitHub VM"
          
          aws ec2 authorize-security-group-ingress \
            --group-name "GitHub-SG" \
            --protocol tcp \
            --port 22 \
            --cidr 0.0.0.0/0  # Permitir acesso SSH de qualquer lugar (pode ser restrito conforme necessário)
          
          # Acesso adicional para RDP (porta 3389) ou Parsec (porta 8000, por exemplo)
          aws ec2 authorize-security-group-ingress \
            --group-name "GitHub-SG" \
            --protocol tcp \
            --port 3389 \
            --cidr 0.0.0.0/0  # Acesso RDP remoto

      # Etapa 7: Commit e Push para o Repositório
      - name: Commit e Push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "Máquina Virtual de Alto Desempenho Criada"
          git push

      # Etapa 8: Manter Máquina em Execução
      - name: Manter Máquina em Execução
        run: |
          while true; do
            echo "Máquina virtual em execução..."
            sleep 3600  # Espera 1 hora antes de continuar
          done
